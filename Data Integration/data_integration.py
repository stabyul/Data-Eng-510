# -*- coding: utf-8 -*-
"""data_integration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1we2PsIs0M5ppjQqxvMrv4hAORw9y3rNs
"""

import pandas as pd
import numpy as np

cases_df= pd.read_csv('covid_confirmed_usafacts.csv')
death_df= pd.read_csv('covid_deaths_usafacts.csv')
census_df= pd.read_csv('acs2017_county_data.csv')

cases_df = pd.read_csv('covid_confirmed_usafacts.csv', usecols=lambda x: x in ['County Name', 'State', '2023-07-23'])
death_df = pd.read_csv('covid_deaths_usafacts.csv', usecols=lambda x: x in ['County Name', 'State', '2023-07-23'])
census_df = pd.read_csv('acs2017_county_data.csv', usecols=lambda x: x in ['County', 'State', 'TotalPop','IncomePerCap', 'Poverty','Unemployment'])

print(cases_df.columns)
print(death_df.columns)
print(census_df.columns)
print(len(cases_df))
print(len(death_df))
print(len(census_df))

cases_df.columns.values.tolist()

death_df.columns.values.tolist()

census_df.columns.values.tolist()

# cases_df['County Name'].str.rstrip()
cases_df['County Name'] = cases_df['County Name'].str.rstrip()
print(cases_df['County Name'])

# death_df['County Name'].str.rstrip()
death_df['County Name'] = death_df['County Name'].str.rstrip()
print(death_df['County Name'])

print((cases_df['County Name'] == "Washington County").sum())

print((death_df['County Name'] == "Washington County").sum())

cases_df = cases_df[cases_df['County Name'] != 'Statewide Unallocated']

death_df = death_df[death_df['County Name'] != 'Statewide Unallocated']

# print((cases_df['County Name'] == 'Statewide Unallocated').sum())

# print((death_df['County Name'] == 'Statewide Unallocated').sum())

print(f'For cases_df: {len(cases_df)}')
print(f'For death_df: {len(death_df)}')

states= {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY",
    "District of Columbia": "DC",
    "American Samoa": "AS",
    "Guam": "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "United States Minor Outlying Islands": "UM",
    "Virgin Islands, U.S.": "VI",
}

# invert the dictionary
states = dict(map(reversed, states.items()))
print(states)

cases_df['State'] = cases_df['State'].map(states)
# cases_df['State'].replace(states, inplace=True)
cases_df.head()

death_df['State'] = death_df['State'].map(states)
death_df.head()

cases_df['key'] = cases_df['County Name'] + ', ' + cases_df['State']
death_df['key'] = death_df['County Name'] + ', ' + death_df['State']
census_df['key'] = census_df['County'] + ', ' + census_df['State']
# cases_df.head()
cases_df.set_index('key', inplace=True)
death_df.set_index('key', inplace=True)
census_df.set_index('key', inplace=True)
census_df.head()

cases_df = cases_df.rename(columns={'2023-07-23': 'Cases'})
death_df = death_df.rename(columns={'2023-07-23': 'Deaths'})
cases_df.head()

death_df.columns.values.tolist()

cases_df.columns.values.tolist()

join_dfs = death_df.join(cases_df, on = 'key',lsuffix='_other' ,how='inner')
join_dfs = join_dfs.join(census_df, on = 'key',rsuffix='_other' ,how='inner')
join_dfs.head()

join_dfs['CasesPerCap'] = join_dfs['Cases'] / join_dfs['TotalPop']
join_dfs['DeathsPerCap'] = join_dfs['Deaths'] / join_dfs['TotalPop']
join_dfs.head()

print(f'Rows in join_dfs: {len(join_dfs)}')

corr_mat = join_dfs.corr(numeric_only=True)
corr_mat

import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(corr_mat, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Matrix Heatmap')
plt.show()

