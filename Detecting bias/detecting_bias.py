# -*- coding: utf-8 -*-
"""detecting_bias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17mCONGC7JE-nuEDLXUTKIWwE1r6hkCvb
"""

import pandas as pd
import numpy as np
from bs4 import BeautifulSoup
with open('trimet_stopevents_2022-12-07.html', 'r') as f:
    html = f.read()

soup = BeautifulSoup(html, 'lxml')
tables = soup.find_all('table')

dfs = []
for table in tables:
    h2 = table.find_previous('h2')
    trip_id = h2.text.strip().split('PDX_TRIP')[-1].strip()
    rows = table.find_all('tr')[1:]
    headers = [th.text.strip() for th in table.find_all('th')]
    data = []
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append(cols)
    df = pd.DataFrame(data, columns=headers)
    df['trip_id'] = trip_id
    dfs.append(df)
df = pd.concat(dfs)
df.reset_index(drop=True, inplace=True)

df.to_csv('trimet_stopevents_2022-12-07.csv', index=False)

da = pd.read_csv('trimet_stopevents_2022-12-07.csv')
da.columns

stops_df = pd.read_csv('trimet_stopevents_2022-12-07.csv', usecols=['trip_id', 'vehicle_number', 'arrive_time', 'location_id', 'ons', 'offs'])
stops_df = stops_df [['trip_id', 'vehicle_number', 'arrive_time', 'location_id', 'ons', 'offs']]
stops_df

stops_df['arrive_time'] = pd.to_timedelta(stops_df['arrive_time'], unit='s')
stops_df.rename(columns={'arrive_time': 'tstamp'}, inplace=True)
stops_df['tstamp'] = pd.to_datetime('2022-12-07') + stops_df['tstamp']
stops_df

print(f'number of records:{len(stops_df)}')
veh = stops_df['vehicle_number'].nunique()
print(f'number of unique vehicle numbers:{veh}')
un = stops_df['location_id'].nunique()
print(f'number of unique location id:{un}')
min = stops_df['tstamp'].min()
max = stops_df['tstamp'].max()
print(f'min date:{min}')
print(f'max date:{max}')

on = stops_df['ons']>=1
print(f'number of on stops:{on.sum()}')
print(f'percentage of on stops:{on.sum()/len(stops_df) *100} %')

stop_6913 = stops_df[stops_df['location_id'] == 6913]
print(f'number of stop events at location id 6913: {len(stop_6913)}')
print(f'bus number: {len(stop_6913["vehicle_number"].unique())}')
on = stop_6913['ons']>=1
print(f'at least one boarded:{len(on[on])}')
print(f'percentage of on stops:{len(on[on])/len(stop_6913) *100} %')

veh_4062 = stops_df[stops_df['vehicle_number'] == 4062]
print(f'number of stop events for vehicle number 4062: {len(veh_4062)}')
print(f'number of total passengers boarded this vehicle: {veh_4062["ons"].sum()}')
print(f'number of passengers deboarded this vehicle: {veh_4062["offs"].sum()}')
on = veh_4062['ons']>=1
print(f'at least one boarded:{len(on[on])}')
print(f'percentage of on stops:{len(on[on])/len(veh_4062) *100} %')

on = stops_df['ons'] >= 1
pro = on.sum()/len(stops_df)
stops_df_bus = stops_df['vehicle_number'].value_counts()
print(stops_df_bus)
stops_df_bus_on = stops_df[stops_df['ons']>=1]['vehicle_number'].value_counts()
print(f"stop:{stops_df_bus_on}")
stops_df_bus_on_percentage = stops_df_bus_on/stops_df_bus * 100
print(f"percentage:{stops_df_bus_on_percentage}")

stops_df_bus_on_without = stops_df_bus_on/stops_df_bus
from scipy.stats import binomtest
p_value  = []
for i in stops_df_bus.index:
    p = binomtest(stops_df_bus_on[i], n=stops_df_bus[i], p=pro, alternative='less').pvalue
    p_value.append(p)
p_value_df = pd.DataFrame({'vehicle_number': stops_df_bus.index, 'p_value': p_value})
p_value_df = p_value_df[p_value_df['p_value']<0.05]
p_value_df

tri2 = pd.read_csv('trimet_relpos_2022-12-07.csv')
tri2

replos2 = tri2['RELPOS'].tolist()
print(replos2)
replos = tri2.groupby('VEHICLE_NUMBER')['RELPOS'].apply(list)
print(replos)
from scipy.stats import ttest_ind
t_test = []
for i in replos.index:
  t_test.append(ttest_ind(replos[i], replos2, equal_var=False).pvalue)

p_df = pd.DataFrame({'vehicle_number': replos.index, 'p_value': t_test})
p_df = p_df[p_df['p_value']<0.005]
p_df

ons = stops_df['ons'].sum()
off = stops_df['offs'].sum()
ons = stops_df.groupby('vehicle_number')['ons'].sum()
off = stops_df.groupby('vehicle_number')['offs'].sum()
print(ons)
print(off)
from scipy.stats import chi2_contingency
p_value = []
for i in ons.index:
  contingency_table = [[ons[i], off[i]], [ons.sum() - ons[i], off.sum() - off[i]]]
  chi2, p, dof, expected = chi2_contingency(contingency_table)
  p_value.append(p)
p_value_df = pd.DataFrame({'vehicle_number': ons.index, 'p_value': p_value})
p_value_df = p_value_df[p_value_df['p_value']<0.05]
p_value_df

