# -*- coding: utf-8 -*-
"""emp_validate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17UP0X0T4SkQesSIOlW2Ek8Fr_ZeYiKUc
"""

import pandas as pd
import numpy as np
import os
import sys
data_csv = "employees.csv"
data_size = os.path.getsize(data_csv)
##size of the data in bytes
print(f"{data_size} bytes")
data = pd.read_csv("employees.csv")

###number of records in the dataset
record = len(data.index)
print(f"{record} records")

#Assertion: every record has a non-null name field
assert data['name'].isnull().any() == False, "This field should not be empty"

violation_1 = pd.isnull(data['name'])
filter_1 = data[violation_1]
print(f"{len(filter_1)} records")

# New Assertion: every record has a non-null title field
assert data['title'].isnull().any() == False, "This field should not be empty"

violation_new_1 = pd.isnull(data['title'])
filter_new_1 = data[violation_new_1]
if len(filter_new_1) > 0:
  print(f"{len(filter_new_1)} records")
else:
  print(f"{len(filter_new_1)} record")

#Assertion: every employee was hired no earlier than 2015
time = pd.to_datetime('2015-01-01')
data['hire_date'] = pd.to_datetime(data['hire_date'])
assert (data['hire_date'] >= time).all(), "This employee was hired before 2015"

violation_2 = data['hire_date'] < time
filter_2 = data[violation_2]
print(f"{len(filter_2)} records")

#New Assertion: every employee was born 1975 and above
time2 = pd.to_datetime('1975-01-01')
data['birth_date'] = pd.to_datetime(data['birth_date'])
assert (data['birth_date'] >= time2).all(), "This employee was born earlier than 1975"

violation_new_2 = data['birth_date'] < time2
filter_new_2 = data[violation_new_2]
print(f"{len(filter_new_2)} records")

#Assertion: each employee was born before they were hired
data['hire_date'] = pd.to_datetime(data['hire_date'])
data['birth_date'] = pd.to_datetime(data['birth_date'])
date_format = "%Y-%m-%d"
data_hire = data['hire_date'].dt.strftime(date_format)
data_birth = data['birth_date'].dt.strftime(date_format)
assert (data_birth < data_hire).all(), "This employee was hired before being born"

violation_3 = data_birth > data_hire
filter_3 = data[violation_3]
print(f"{len(filter_3)} records")

#New Assertion: each employee was born before they were hired and earns from 70000 and above
data['hire_date'] = pd.to_datetime(data['hire_date'])
data['birth_date'] = pd.to_datetime(data['birth_date'])
date_format = "%Y-%m-%d"
data_hire = data['hire_date'].dt.strftime(date_format)
data_birth = data['birth_date'].dt.strftime(date_format)
assert ((data_birth < data_hire).all() and (data['salary'] >= 70000).all()), "This employee was hired before being born or earns below 70000"

violation_new_3 = (data_birth > data_hire) | (data['salary'] < 70000)
filter_new_3 = data[violation_new_3]
print(f"{len(filter_new_3)} records")

#Assertion: each employee has a manager who is a known employee
assert (data['reports_to'].isin(data['eid'])).all(), "This employee has a manager who is not a known employee"

violation_4 = ~data['reports_to'].isin(data['eid'])
filter_4 = data[violation_4]
print(f"{len(filter_4)} records")

#New Assertion: each employee id have a unique salary
assert (data.groupby('eid')['salary'].nunique() == 1).all(), "This employee id has multiple salaries"

#code that violates the above assertion
violation_new_4 = data.groupby('eid')['salary'].nunique() > 1
#count true values
print(f"{len(violation_new_4[violation_new_4 == True])} records")

#Assertion: each city has more than one employee

assert (data.groupby('city')['eid'].nunique() > 1).all(), "This city has one or less employee"

#code that violates the above assertion
violation_5 = data.groupby('city')['eid'].nunique() <= 1
#count true values
print(f"{len(violation_5[violation_5 == True])} records")

#New Assertion: each country has more than 15 employees
assert (data.groupby('country')['eid'].nunique() > 15).all(), "This country has 15 or less employee"

violation_new_5 = data.groupby('country')['eid'].nunique() <= 15
#count true values
print(f"{len(violation_new_5[violation_new_5 == True])} countries")

from scipy import stats
res = stats.shapiro(data['salary'])
res.statistic
# assert res.statistic > 0.95, "This salary is not normally distributed"
assert res.pvalue > 0.05, "salaries are not normally distributed"

##Assertion: the salaries are normally distributed
# Add code to your program to validate this assertion
assert (data['salary'].skew() < 0.5).all(), "salaries are not normally distributed"

import matplotlib.pyplot as plt
plt.hist(data['salary'], bins = 20)
plt.xlabel('Salary')
plt.ylabel('Frequency')
plt.title('Distribution of Salaries')
plt.show()

# #New Assertion:  the employee ids  are normally distributed
res2 = stats.shapiro(data['eid'])
res2.statistic
assert res2.pvalue > 0.05, "employee ids are not normally distributed"

plt.hist(data['eid'], bins = 20)
plt.xlabel('Employee ID')
plt.ylabel('Frequency')
plt.title('Distribution of Employee IDs')
plt.show()

